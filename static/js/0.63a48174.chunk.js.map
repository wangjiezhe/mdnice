{"version":3,"sources":["../node_modules/codemirror/mode/javascript/javascript.js"],"names":["CodeMirror","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","stream","state","quote","ch","next","tokenize","escaped","peek","match","test","eat","tokenComment","skipToEnd","expressionAllowed","inSet","readRegexp","current","tokenQuasi","lexical","eatWhile","word","lastType","propertyIsEnumerable","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","string","indexOf","start","m","exec","slice","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","JSLexical","indented","column","align","prev","info","this","inScope","varname","v","localVars","name","cx","context","vars","marked","cc","pass","i","arguments","length","push","apply","inList","list","register","block","newContext","registerVarScoped","inner","Context","Var","globalVars","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","lex","poplex","expect","wanted","exp","statement","value","vardef","parenExpr","maybeexpression","pop","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","expression","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","hasOwnProperty","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","maybeTarget","me","expr","property","backUp","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprop","typearg","maybeReturnType","functiondecl","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","startState","basecolumn","token","sol","indentation","eatSpace","parseJS","textAfter","Pass","top","firstChar","c","closing","isContinuedStatement","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","registerHelper","defineMIME","mod"],"mappings":"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","file":"static/js/0.63a48174.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"javascript\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit;\n    var statementIndent = parserConfig.statementIndent;\n    var jsonldMode = parserConfig.jsonld;\n    var jsonMode = parserConfig.json || jsonldMode;\n    var isTS = parserConfig.typescript;\n    var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/; // Tokenizer\n\n    var keywords = function () {\n      function kw(type) {\n        return {\n          type: type,\n          style: \"keyword\"\n        };\n      }\n\n      var A = kw(\"keyword a\"),\n          B = kw(\"keyword b\"),\n          C = kw(\"keyword c\"),\n          D = kw(\"keyword d\");\n      var operator = kw(\"operator\"),\n          atom = {\n        type: \"atom\",\n        style: \"atom\"\n      };\n      return {\n        \"if\": kw(\"if\"),\n        \"while\": A,\n        \"with\": A,\n        \"else\": B,\n        \"do\": B,\n        \"try\": B,\n        \"finally\": B,\n        \"return\": D,\n        \"break\": D,\n        \"continue\": D,\n        \"new\": kw(\"new\"),\n        \"delete\": C,\n        \"void\": C,\n        \"throw\": C,\n        \"debugger\": kw(\"debugger\"),\n        \"var\": kw(\"var\"),\n        \"const\": kw(\"var\"),\n        \"let\": kw(\"var\"),\n        \"function\": kw(\"function\"),\n        \"catch\": kw(\"catch\"),\n        \"for\": kw(\"for\"),\n        \"switch\": kw(\"switch\"),\n        \"case\": kw(\"case\"),\n        \"default\": kw(\"default\"),\n        \"in\": operator,\n        \"typeof\": operator,\n        \"instanceof\": operator,\n        \"true\": atom,\n        \"false\": atom,\n        \"null\": atom,\n        \"undefined\": atom,\n        \"NaN\": atom,\n        \"Infinity\": atom,\n        \"this\": kw(\"this\"),\n        \"class\": kw(\"class\"),\n        \"super\": kw(\"atom\"),\n        \"yield\": C,\n        \"export\": kw(\"export\"),\n        \"import\": kw(\"import\"),\n        \"extends\": C,\n        \"await\": C\n      };\n    }();\n\n    var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n    var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n    function readRegexp(stream) {\n      var escaped = false,\n          next,\n          inSet = false;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped) {\n          if (next == \"/\" && !inSet) return;\n          if (next == \"[\") inSet = true;else if (inSet && next == \"]\") inSet = false;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n    } // Used as scratch variables to communicate multiple values without\n    // consing up tons of objects.\n\n\n    var type, content;\n\n    function ret(tp, style, cont) {\n      type = tp;\n      content = cont;\n      return style;\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n        return ret(\"number\", \"number\");\n      } else if (ch == \".\" && stream.match(\"..\")) {\n        return ret(\"spread\", \"meta\");\n      } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        return ret(ch);\n      } else if (ch == \"=\" && stream.eat(\">\")) {\n        return ret(\"=>\", \"operator\");\n      } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n        return ret(\"number\", \"number\");\n      } else if (/\\d/.test(ch)) {\n        stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n        return ret(\"number\", \"number\");\n      } else if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        } else if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return ret(\"comment\", \"comment\");\n        } else if (expressionAllowed(stream, state, 1)) {\n          readRegexp(stream);\n          stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n          return ret(\"regexp\", \"string-2\");\n        } else {\n          stream.eat(\"=\");\n          return ret(\"operator\", \"operator\", stream.current());\n        }\n      } else if (ch == \"`\") {\n        state.tokenize = tokenQuasi;\n        return tokenQuasi(stream, state);\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return ret(\"error\", \"error\");\n      } else if (ch == \"<\" && stream.match(\"!--\") || ch == \"-\" && stream.match(\"->\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (isOperatorChar.test(ch)) {\n        if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n          if (stream.eat(\"=\")) {\n            if (ch == \"!\" || ch == \"=\") stream.eat(\"=\");\n          } else if (/[<>*+\\-]/.test(ch)) {\n            stream.eat(ch);\n            if (ch == \">\") stream.eat(ch);\n          }\n        }\n\n        return ret(\"operator\", \"operator\", stream.current());\n      } else if (wordRE.test(ch)) {\n        stream.eatWhile(wordRE);\n        var word = stream.current();\n\n        if (state.lastType != \".\") {\n          if (keywords.propertyIsEnumerable(word)) {\n            var kw = keywords[word];\n            return ret(kw.type, kw.style, word);\n          }\n\n          if (word == \"async\" && stream.match(/^(\\s|\\/\\*.*?\\*\\/)*[\\[\\(\\w]/, false)) return ret(\"async\", \"keyword\", word);\n        }\n\n        return ret(\"variable\", \"variable\", word);\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next;\n\n        if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)) {\n          state.tokenize = tokenBase;\n          return ret(\"jsonld-keyword\", \"meta\");\n        }\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) break;\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return ret(\"comment\", \"comment\");\n    }\n\n    function tokenQuasi(stream, state) {\n      var escaped = false,\n          next;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      return ret(\"quasi\", \"string-2\", stream.current());\n    }\n\n    var brackets = \"([{}])\"; // This is a crude lookahead trick to try and notice that we're\n    // parsing the argument patterns for a fat-arrow function before we\n    // actually hit the arrow token. It only works if the arrow is on\n    // the same line as the arguments and there's no strange noise\n    // (comments) in between. Fallback is to only notice when we hit the\n    // arrow, and not declare the arguments as locals for the arrow\n    // body.\n\n    function findFatArrow(stream, state) {\n      if (state.fatArrowAt) state.fatArrowAt = null;\n      var arrow = stream.string.indexOf(\"=>\", stream.start);\n      if (arrow < 0) return;\n\n      if (isTS) {\n        // Try to skip TypeScript return type declarations after the arguments\n        var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow));\n        if (m) arrow = m.index;\n      }\n\n      var depth = 0,\n          sawSomething = false;\n\n      for (var pos = arrow - 1; pos >= 0; --pos) {\n        var ch = stream.string.charAt(pos);\n        var bracket = brackets.indexOf(ch);\n\n        if (bracket >= 0 && bracket < 3) {\n          if (!depth) {\n            ++pos;\n            break;\n          }\n\n          if (--depth == 0) {\n            if (ch == \"(\") sawSomething = true;\n            break;\n          }\n        } else if (bracket >= 3 && bracket < 6) {\n          ++depth;\n        } else if (wordRE.test(ch)) {\n          sawSomething = true;\n        } else if (/[\"'\\/`]/.test(ch)) {\n          for (;; --pos) {\n            if (pos == 0) return;\n            var next = stream.string.charAt(pos - 1);\n\n            if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") {\n              pos--;\n              break;\n            }\n          }\n        } else if (sawSomething && !depth) {\n          ++pos;\n          break;\n        }\n      }\n\n      if (sawSomething && !depth) state.fatArrowAt = pos;\n    } // Parser\n\n\n    var atomicTypes = {\n      \"atom\": true,\n      \"number\": true,\n      \"variable\": true,\n      \"string\": true,\n      \"regexp\": true,\n      \"this\": true,\n      \"jsonld-keyword\": true\n    };\n\n    function JSLexical(indented, column, type, align, prev, info) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.prev = prev;\n      this.info = info;\n      if (align != null) this.align = align;\n    }\n\n    function inScope(state, varname) {\n      for (var v = state.localVars; v; v = v.next) {\n        if (v.name == varname) return true;\n      }\n\n      for (var cx = state.context; cx; cx = cx.prev) {\n        for (var v = cx.vars; v; v = v.next) {\n          if (v.name == varname) return true;\n        }\n      }\n    }\n\n    function parseJS(state, style, type, content, stream) {\n      var cc = state.cc; // Communicate our context to the combinators.\n      // (Less wasteful than consing up a hundred closures on every call.)\n\n      cx.state = state;\n      cx.stream = stream;\n      cx.marked = null, cx.cc = cc;\n      cx.style = style;\n      if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = true;\n\n      while (true) {\n        var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n\n        if (combinator(type, content)) {\n          while (cc.length && cc[cc.length - 1].lex) {\n            cc.pop()();\n          }\n\n          if (cx.marked) return cx.marked;\n          if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n          return style;\n        }\n      }\n    } // Combinator utils\n\n\n    var cx = {\n      state: null,\n      column: null,\n      marked: null,\n      cc: null\n    };\n\n    function pass() {\n      for (var i = arguments.length - 1; i >= 0; i--) {\n        cx.cc.push(arguments[i]);\n      }\n    }\n\n    function cont() {\n      pass.apply(null, arguments);\n      return true;\n    }\n\n    function inList(name, list) {\n      for (var v = list; v; v = v.next) {\n        if (v.name == name) return true;\n      }\n\n      return false;\n    }\n\n    function register(varname) {\n      var state = cx.state;\n      cx.marked = \"def\";\n\n      if (state.context) {\n        if (state.lexical.info == \"var\" && state.context && state.context.block) {\n          // FIXME function decls are also not block scoped\n          var newContext = registerVarScoped(varname, state.context);\n\n          if (newContext != null) {\n            state.context = newContext;\n            return;\n          }\n        } else if (!inList(varname, state.localVars)) {\n          state.localVars = new Var(varname, state.localVars);\n          return;\n        }\n      } // Fall through means this is global\n\n\n      if (parserConfig.globalVars && !inList(varname, state.globalVars)) state.globalVars = new Var(varname, state.globalVars);\n    }\n\n    function registerVarScoped(varname, context) {\n      if (!context) {\n        return null;\n      } else if (context.block) {\n        var inner = registerVarScoped(varname, context.prev);\n        if (!inner) return null;\n        if (inner == context.prev) return context;\n        return new Context(inner, context.vars, true);\n      } else if (inList(varname, context.vars)) {\n        return context;\n      } else {\n        return new Context(context.prev, new Var(varname, context.vars), false);\n      }\n    }\n\n    function isModifier(name) {\n      return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\";\n    } // Combinators\n\n\n    function Context(prev, vars, block) {\n      this.prev = prev;\n      this.vars = vars;\n      this.block = block;\n    }\n\n    function Var(name, next) {\n      this.name = name;\n      this.next = next;\n    }\n\n    var defaultVars = new Var(\"this\", new Var(\"arguments\", null));\n\n    function pushcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, false);\n      cx.state.localVars = defaultVars;\n    }\n\n    function pushblockcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, true);\n      cx.state.localVars = null;\n    }\n\n    function popcontext() {\n      cx.state.localVars = cx.state.context.vars;\n      cx.state.context = cx.state.context.prev;\n    }\n\n    popcontext.lex = true;\n\n    function pushlex(type, info) {\n      var result = function result() {\n        var state = cx.state,\n            indent = state.indented;\n        if (state.lexical.type == \"stat\") indent = state.lexical.indented;else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev) {\n          indent = outer.indented;\n        }\n        state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n      };\n\n      result.lex = true;\n      return result;\n    }\n\n    function poplex() {\n      var state = cx.state;\n\n      if (state.lexical.prev) {\n        if (state.lexical.type == \")\") state.indented = state.lexical.indented;\n        state.lexical = state.lexical.prev;\n      }\n    }\n\n    poplex.lex = true;\n\n    function expect(wanted) {\n      function exp(type) {\n        if (type == wanted) return cont();else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();else return cont(exp);\n      }\n\n      ;\n      return exp;\n    }\n\n    function statement(type, value) {\n      if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n      if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n      if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n      if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n      if (type == \"debugger\") return cont(expect(\";\"));\n      if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n      if (type == \";\") return cont();\n\n      if (type == \"if\") {\n        if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex) cx.state.cc.pop()();\n        return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n      }\n\n      if (type == \"function\") return cont(functiondef);\n      if (type == \"for\") return cont(pushlex(\"form\"), forspec, statement, poplex);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex);\n      }\n\n      if (type == \"variable\") {\n        if (isTS && value == \"declare\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n          cx.marked = \"keyword\";\n          if (value == \"enum\") return cont(enumdef);else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex);\n        } else if (isTS && value == \"namespace\") {\n          cx.marked = \"keyword\";\n          return cont(pushlex(\"form\"), expression, statement, poplex);\n        } else if (isTS && value == \"abstract\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else {\n          return cont(pushlex(\"stat\"), maybelabel);\n        }\n      }\n\n      if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext, block, poplex, poplex, popcontext);\n      if (type == \"case\") return cont(expression, expect(\":\"));\n      if (type == \"default\") return cont(expect(\":\"));\n      if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n      if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n      if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n      if (type == \"async\") return cont(statement);\n      if (value == \"@\") return cont(expression, statement);\n      return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n    }\n\n    function maybeCatchBinding(type) {\n      if (type == \"(\") return cont(funarg, expect(\")\"));\n    }\n\n    function expression(type, value) {\n      return expressionInner(type, value, false);\n    }\n\n    function expressionNoComma(type, value) {\n      return expressionInner(type, value, true);\n    }\n\n    function parenExpr(type) {\n      if (type != \"(\") return pass();\n      return cont(pushlex(\")\"), expression, expect(\")\"), poplex);\n    }\n\n    function expressionInner(type, value, noComma) {\n      if (cx.state.fatArrowAt == cx.stream.start) {\n        var body = noComma ? arrowBodyNoComma : arrowBody;\n        if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n      }\n\n      var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n      if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n      if (type == \"function\") return cont(functiondef, maybeop);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\"), classExpression, poplex);\n      }\n\n      if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n      if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n      if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n      if (type == \"quasi\") return pass(quasi, maybeop);\n      if (type == \"new\") return cont(maybeTarget(noComma));\n      if (type == \"import\") return cont(expression);\n      return cont();\n    }\n\n    function maybeexpression(type) {\n      if (type.match(/[;\\}\\)\\],]/)) return pass();\n      return pass(expression);\n    }\n\n    function maybeoperatorComma(type, value) {\n      if (type == \",\") return cont(expression);\n      return maybeoperatorNoComma(type, value, false);\n    }\n\n    function maybeoperatorNoComma(type, value, noComma) {\n      var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n      var expr = noComma == false ? expression : expressionNoComma;\n      if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n\n      if (type == \"operator\") {\n        if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n        if (isTS && value == \"<\" && cx.stream.match(/^([^>]|<.*?>)*>\\s*\\(/, false)) return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n        if (value == \"?\") return cont(expression, expect(\":\"), expr);\n        return cont(expr);\n      }\n\n      if (type == \"quasi\") {\n        return pass(quasi, me);\n      }\n\n      if (type == \";\") return;\n      if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n      if (type == \".\") return cont(property, me);\n      if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n\n      if (isTS && value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr, me);\n      }\n\n      if (type == \"regexp\") {\n        cx.state.lastType = cx.marked = \"operator\";\n        cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);\n        return cont(expr);\n      }\n    }\n\n    function quasi(type, value) {\n      if (type != \"quasi\") return pass();\n      if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n      return cont(expression, continueQuasi);\n    }\n\n    function continueQuasi(type) {\n      if (type == \"}\") {\n        cx.marked = \"string-2\";\n        cx.state.tokenize = tokenQuasi;\n        return cont(quasi);\n      }\n    }\n\n    function arrowBody(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expression);\n    }\n\n    function arrowBodyNoComma(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expressionNoComma);\n    }\n\n    function maybeTarget(noComma) {\n      return function (type) {\n        if (type == \".\") return cont(noComma ? targetNoComma : target);else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);else return pass(noComma ? expressionNoComma : expression);\n      };\n    }\n\n    function target(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorComma);\n      }\n    }\n\n    function targetNoComma(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorNoComma);\n      }\n    }\n\n    function maybelabel(type) {\n      if (type == \":\") return cont(poplex, statement);\n      return pass(maybeoperatorComma, expect(\";\"), poplex);\n    }\n\n    function property(type) {\n      if (type == \"variable\") {\n        cx.marked = \"property\";\n        return cont();\n      }\n    }\n\n    function objprop(type, value) {\n      if (type == \"async\") {\n        cx.marked = \"property\";\n        return cont(objprop);\n      } else if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        if (value == \"get\" || value == \"set\") return cont(getterSetter);\n        var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n\n        if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false))) cx.state.fatArrowAt = cx.stream.pos + m[0].length;\n        return cont(afterprop);\n      } else if (type == \"number\" || type == \"string\") {\n        cx.marked = jsonldMode ? \"property\" : cx.style + \" property\";\n        return cont(afterprop);\n      } else if (type == \"jsonld-keyword\") {\n        return cont(afterprop);\n      } else if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \"[\") {\n        return cont(expression, maybetype, expect(\"]\"), afterprop);\n      } else if (type == \"spread\") {\n        return cont(expressionNoComma, afterprop);\n      } else if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \":\") {\n        return pass(afterprop);\n      }\n    }\n\n    function getterSetter(type) {\n      if (type != \"variable\") return pass(afterprop);\n      cx.marked = \"property\";\n      return cont(functiondef);\n    }\n\n    function afterprop(type) {\n      if (type == \":\") return cont(expressionNoComma);\n      if (type == \"(\") return pass(functiondef);\n    }\n\n    function commasep(what, end, sep) {\n      function proceed(type, value) {\n        if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n          var lex = cx.state.lexical;\n          if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n          return cont(function (type, value) {\n            if (type == end || value == end) return pass();\n            return pass(what);\n          }, proceed);\n        }\n\n        if (type == end || value == end) return cont();\n        if (sep && sep.indexOf(\";\") > -1) return pass(what);\n        return cont(expect(end));\n      }\n\n      return function (type, value) {\n        if (type == end || value == end) return cont();\n        return pass(what, proceed);\n      };\n    }\n\n    function contCommasep(what, end, info) {\n      for (var i = 3; i < arguments.length; i++) {\n        cx.cc.push(arguments[i]);\n      }\n\n      return cont(pushlex(end, info), commasep(what, end), poplex);\n    }\n\n    function block(type) {\n      if (type == \"}\") return cont();\n      return pass(statement, block);\n    }\n\n    function maybetype(type, value) {\n      if (isTS) {\n        if (type == \":\") return cont(typeexpr);\n        if (value == \"?\") return cont(maybetype);\n      }\n    }\n\n    function maybetypeOrIn(type, value) {\n      if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr);\n    }\n\n    function mayberettype(type) {\n      if (isTS && type == \":\") {\n        if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr);else return cont(typeexpr);\n      }\n    }\n\n    function isKW(_, value) {\n      if (value == \"is\") {\n        cx.marked = \"keyword\";\n        return cont();\n      }\n    }\n\n    function typeexpr(type, value) {\n      if (value == \"keyof\" || value == \"typeof\" || value == \"infer\") {\n        cx.marked = \"keyword\";\n        return cont(value == \"typeof\" ? expressionNoComma : typeexpr);\n      }\n\n      if (type == \"variable\" || value == \"void\") {\n        cx.marked = \"type\";\n        return cont(afterType);\n      }\n\n      if (value == \"|\" || value == \"&\") return cont(typeexpr);\n      if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n      if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType);\n      if (type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\", \",;\"), poplex, afterType);\n      if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType);\n      if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr);\n    }\n\n    function maybeReturnType(type) {\n      if (type == \"=>\") return cont(typeexpr);\n    }\n\n    function typeprop(type, value) {\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(typeprop);\n      } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n        return cont(typeprop);\n      } else if (type == \":\") {\n        return cont(typeexpr);\n      } else if (type == \"[\") {\n        return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop);\n      } else if (type == \"(\") {\n        return pass(functiondecl, typeprop);\n      }\n    }\n\n    function typearg(type, value) {\n      if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg);\n      if (type == \":\") return cont(typeexpr);\n      if (type == \"spread\") return cont(typearg);\n      return pass(typeexpr);\n    }\n\n    function afterType(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n      if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr);\n      if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType);\n\n      if (value == \"extends\" || value == \"implements\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr);\n      }\n\n      if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr);\n    }\n\n    function maybeTypeArgs(_, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n    }\n\n    function typeparam() {\n      return pass(typeexpr, maybeTypeDefault);\n    }\n\n    function maybeTypeDefault(_, value) {\n      if (value == \"=\") return cont(typeexpr);\n    }\n\n    function vardef(_, value) {\n      if (value == \"enum\") {\n        cx.marked = \"keyword\";\n        return cont(enumdef);\n      }\n\n      return pass(pattern, maybetype, maybeAssign, vardefCont);\n    }\n\n    function pattern(type, value) {\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(pattern);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont();\n      }\n\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"[\") return contCommasep(eltpattern, \"]\");\n      if (type == \"{\") return contCommasep(proppattern, \"}\");\n    }\n\n    function proppattern(type, value) {\n      if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n        register(value);\n        return cont(maybeAssign);\n      }\n\n      if (type == \"variable\") cx.marked = \"property\";\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"}\") return pass();\n      if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n      return cont(expect(\":\"), pattern, maybeAssign);\n    }\n\n    function eltpattern() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function maybeAssign(_type, value) {\n      if (value == \"=\") return cont(expressionNoComma);\n    }\n\n    function vardefCont(type) {\n      if (type == \",\") return cont(vardef);\n    }\n\n    function maybeelse(type, value) {\n      if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n    }\n\n    function forspec(type, value) {\n      if (value == \"await\") return cont(forspec);\n      if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n    }\n\n    function forspec1(type) {\n      if (type == \"var\") return cont(vardef, forspec2);\n      if (type == \"variable\") return cont(forspec2);\n      return pass(forspec2);\n    }\n\n    function forspec2(type, value) {\n      if (type == \")\") return cont();\n      if (type == \";\") return cont(forspec2);\n\n      if (value == \"in\" || value == \"of\") {\n        cx.marked = \"keyword\";\n        return cont(expression, forspec2);\n      }\n\n      return pass(expression, forspec2);\n    }\n\n    function functiondef(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondef);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondef);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef);\n    }\n\n    function functiondecl(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondecl);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondecl);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl);\n    }\n\n    function typename(type, value) {\n      if (type == \"keyword\" || type == \"variable\") {\n        cx.marked = \"type\";\n        return cont(typename);\n      } else if (value == \"<\") {\n        return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex);\n      }\n    }\n\n    function funarg(type, value) {\n      if (value == \"@\") cont(expression, funarg);\n      if (type == \"spread\") return cont(funarg);\n\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(funarg);\n      }\n\n      if (isTS && type == \"this\") return cont(maybetype, maybeAssign);\n      return pass(pattern, maybetype, maybeAssign);\n    }\n\n    function classExpression(type, value) {\n      // Class expressions may have an optional name.\n      if (type == \"variable\") return className(type, value);\n      return classNameAfter(type, value);\n    }\n\n    function className(type, value) {\n      if (type == \"variable\") {\n        register(value);\n        return cont(classNameAfter);\n      }\n    }\n\n    function classNameAfter(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter);\n\n      if (value == \"extends\" || value == \"implements\" || isTS && type == \",\") {\n        if (value == \"implements\") cx.marked = \"keyword\";\n        return cont(isTS ? typeexpr : expression, classNameAfter);\n      }\n\n      if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n    }\n\n    function classBody(type, value) {\n      if (type == \"async\" || type == \"variable\" && (value == \"static\" || value == \"get\" || value == \"set\" || isTS && isModifier(value)) && cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false)) {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(isTS ? classfield : functiondef, classBody);\n      }\n\n      if (type == \"number\" || type == \"string\") return cont(isTS ? classfield : functiondef, classBody);\n      if (type == \"[\") return cont(expression, maybetype, expect(\"]\"), isTS ? classfield : functiondef, classBody);\n\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (isTS && type == \"(\") return pass(functiondecl, classBody);\n      if (type == \";\" || type == \",\") return cont(classBody);\n      if (type == \"}\") return cont();\n      if (value == \"@\") return cont(expression, classBody);\n    }\n\n    function classfield(type, value) {\n      if (value == \"?\") return cont(classfield);\n      if (type == \":\") return cont(typeexpr, maybeAssign);\n      if (value == \"=\") return cont(expressionNoComma);\n      var context = cx.state.lexical.prev,\n          isInterface = context && context.info == \"interface\";\n      return pass(isInterface ? functiondecl : functiondef);\n    }\n\n    function afterExport(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(maybeFrom, expect(\";\"));\n      }\n\n      if (value == \"default\") {\n        cx.marked = \"keyword\";\n        return cont(expression, expect(\";\"));\n      }\n\n      if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n      return pass(statement);\n    }\n\n    function exportField(type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(expect(\"variable\"));\n      }\n\n      if (type == \"variable\") return pass(expressionNoComma, exportField);\n    }\n\n    function afterImport(type) {\n      if (type == \"string\") return cont();\n      if (type == \"(\") return pass(expression);\n      return pass(importSpec, maybeMoreImports, maybeFrom);\n    }\n\n    function importSpec(type, value) {\n      if (type == \"{\") return contCommasep(importSpec, \"}\");\n      if (type == \"variable\") register(value);\n      if (value == \"*\") cx.marked = \"keyword\";\n      return cont(maybeAs);\n    }\n\n    function maybeMoreImports(type) {\n      if (type == \",\") return cont(importSpec, maybeMoreImports);\n    }\n\n    function maybeAs(_type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(importSpec);\n      }\n    }\n\n    function maybeFrom(_type, value) {\n      if (value == \"from\") {\n        cx.marked = \"keyword\";\n        return cont(expression);\n      }\n    }\n\n    function arrayLiteral(type) {\n      if (type == \"]\") return cont();\n      return pass(commasep(expressionNoComma, \"]\"));\n    }\n\n    function enumdef() {\n      return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex);\n    }\n\n    function enummember() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function isContinuedStatement(state, textAfter) {\n      return state.lastType == \"operator\" || state.lastType == \",\" || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));\n    }\n\n    function expressionAllowed(stream, state, backUp) {\n      return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) || state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        var state = {\n          tokenize: tokenBase,\n          lastType: \"sof\",\n          cc: [],\n          lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n          localVars: parserConfig.localVars,\n          context: parserConfig.localVars && new Context(null, null, false),\n          indented: basecolumn || 0\n        };\n        if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\") state.globalVars = parserConfig.globalVars;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = false;\n          state.indented = stream.indentation();\n          findFatArrow(stream, state);\n        }\n\n        if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (type == \"comment\") return style;\n        state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n        return parseJS(state, style, type, content, stream);\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize == tokenComment) return CodeMirror.Pass;\n        if (state.tokenize != tokenBase) return 0;\n        var firstChar = textAfter && textAfter.charAt(0),\n            lexical = state.lexical,\n            top; // Kludge to prevent 'maybelse' from blocking lexical scope pops\n\n        if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n          var c = state.cc[i];\n          if (c == poplex) lexical = lexical.prev;else if (c != maybeelse) break;\n        }\n\n        while ((lexical.type == \"stat\" || lexical.type == \"form\") && (firstChar == \"}\" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))) {\n          lexical = lexical.prev;\n        }\n\n        if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\") lexical = lexical.prev;\n        var type = lexical.type,\n            closing = firstChar == type;\n        if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);else if (type == \"form\" && firstChar == \"{\") return lexical.indented;else if (type == \"form\") return lexical.indented + indentUnit;else if (type == \"stat\") return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false) return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);else if (lexical.align) return lexical.column + (closing ? 0 : 1);else return lexical.indented + (closing ? 0 : indentUnit);\n      },\n      electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      blockCommentStart: jsonMode ? null : \"/*\",\n      blockCommentEnd: jsonMode ? null : \"*/\",\n      blockCommentContinue: jsonMode ? null : \" * \",\n      lineComment: jsonMode ? null : \"//\",\n      fold: \"brace\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      helperType: jsonMode ? \"json\" : \"javascript\",\n      jsonldMode: jsonldMode,\n      jsonMode: jsonMode,\n      expressionAllowed: expressionAllowed,\n      skipExpression: function skipExpression(state) {\n        var top = state.cc[state.cc.length - 1];\n        if (top == expression || top == expressionNoComma) state.cc.pop();\n      }\n    };\n  });\n  CodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n  CodeMirror.defineMIME(\"text/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/x-json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/ld+json\", {\n    name: \"javascript\",\n    jsonld: true\n  });\n  CodeMirror.defineMIME(\"text/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n  CodeMirror.defineMIME(\"application/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n});"],"sourceRoot":""}