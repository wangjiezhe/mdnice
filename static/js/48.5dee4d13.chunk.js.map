{"version":3,"sources":["../node_modules/codemirror/mode/elm/elm.js"],"names":["CodeMirror","defineMode","switchState","source","setState","f","smallRE","largeRE","digitRE","hexitRE","octitRE","idRE","symbolRE","specialRE","whiteCharRE","normal","eatWhile","ch","next","test","eat","t","ncomment","type","nest","currNest","eol","stringLiteral","isDef","pos","skipToEnd","stringGap","wellKnownWords","wkw","keywords","i","length","startState","copyState","s","token","stream","state","w","current","hasOwnProperty","defineMIME","mod"],"mappings":"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","file":"static/js/48.5dee4d13.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"elm\", function () {\n    function switchState(source, setState, f) {\n      setState(f);\n      return f(source, setState);\n    } // These should all be Unicode extended, as per the Haskell 2010 report\n\n\n    var smallRE = /[a-z_]/;\n    var largeRE = /[A-Z]/;\n    var digitRE = /[0-9]/;\n    var hexitRE = /[0-9A-Fa-f]/;\n    var octitRE = /[0-7]/;\n    var idRE = /[a-z_A-Z0-9\\']/;\n    var symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:\\u03BB\\u2192]/;\n    var specialRE = /[(),;[\\]`{}]/;\n    var whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\n    function normal() {\n      return function (source, setState) {\n        if (source.eatWhile(whiteCharRE)) {\n          return null;\n        }\n\n        var ch = source.next();\n\n        if (specialRE.test(ch)) {\n          if (ch == '{' && source.eat('-')) {\n            var t = \"comment\";\n            if (source.eat('#')) t = \"meta\";\n            return switchState(source, setState, ncomment(t, 1));\n          }\n\n          return null;\n        }\n\n        if (ch == '\\'') {\n          if (source.eat('\\\\')) source.next(); // should handle other escapes here\n          else source.next();\n          if (source.eat('\\'')) return \"string\";\n          return \"error\";\n        }\n\n        if (ch == '\"') {\n          return switchState(source, setState, stringLiteral);\n        }\n\n        if (largeRE.test(ch)) {\n          source.eatWhile(idRE);\n          if (source.eat('.')) return \"qualifier\";\n          return \"variable-2\";\n        }\n\n        if (smallRE.test(ch)) {\n          var isDef = source.pos === 1;\n          source.eatWhile(idRE);\n          return isDef ? \"type\" : \"variable\";\n        }\n\n        if (digitRE.test(ch)) {\n          if (ch == '0') {\n            if (source.eat(/[xX]/)) {\n              source.eatWhile(hexitRE); // should require at least 1\n\n              return \"integer\";\n            }\n\n            if (source.eat(/[oO]/)) {\n              source.eatWhile(octitRE); // should require at least 1\n\n              return \"number\";\n            }\n          }\n\n          source.eatWhile(digitRE);\n          var t = \"number\";\n\n          if (source.eat('.')) {\n            t = \"number\";\n            source.eatWhile(digitRE); // should require at least 1\n          }\n\n          if (source.eat(/[eE]/)) {\n            t = \"number\";\n            source.eat(/[-+]/);\n            source.eatWhile(digitRE); // should require at least 1\n          }\n\n          return t;\n        }\n\n        if (symbolRE.test(ch)) {\n          if (ch == '-' && source.eat(/-/)) {\n            source.eatWhile(/-/);\n\n            if (!source.eat(symbolRE)) {\n              source.skipToEnd();\n              return \"comment\";\n            }\n          }\n\n          source.eatWhile(symbolRE);\n          return \"builtin\";\n        }\n\n        return \"error\";\n      };\n    }\n\n    function ncomment(type, nest) {\n      if (nest == 0) {\n        return normal();\n      }\n\n      return function (source, setState) {\n        var currNest = nest;\n\n        while (!source.eol()) {\n          var ch = source.next();\n\n          if (ch == '{' && source.eat('-')) {\n            ++currNest;\n          } else if (ch == '-' && source.eat('}')) {\n            --currNest;\n\n            if (currNest == 0) {\n              setState(normal());\n              return type;\n            }\n          }\n        }\n\n        setState(ncomment(type, currNest));\n        return type;\n      };\n    }\n\n    function stringLiteral(source, setState) {\n      while (!source.eol()) {\n        var ch = source.next();\n\n        if (ch == '\"') {\n          setState(normal());\n          return \"string\";\n        }\n\n        if (ch == '\\\\') {\n          if (source.eol() || source.eat(whiteCharRE)) {\n            setState(stringGap);\n            return \"string\";\n          }\n\n          if (!source.eat('&')) source.next(); // should handle other escapes here\n        }\n      }\n\n      setState(normal());\n      return \"error\";\n    }\n\n    function stringGap(source, setState) {\n      if (source.eat('\\\\')) {\n        return switchState(source, setState, stringLiteral);\n      }\n\n      source.next();\n      setState(normal());\n      return \"error\";\n    }\n\n    var wellKnownWords = function () {\n      var wkw = {};\n      var keywords = [\"case\", \"of\", \"as\", \"if\", \"then\", \"else\", \"let\", \"in\", \"infix\", \"infixl\", \"infixr\", \"type\", \"alias\", \"input\", \"output\", \"foreign\", \"loopback\", \"module\", \"where\", \"import\", \"exposing\", \"_\", \"..\", \"|\", \":\", \"=\", \"\\\\\", \"\\\"\", \"->\", \"<-\"];\n\n      for (var i = keywords.length; i--;) {\n        wkw[keywords[i]] = \"keyword\";\n      }\n\n      return wkw;\n    }();\n\n    return {\n      startState: function startState() {\n        return {\n          f: normal()\n        };\n      },\n      copyState: function copyState(s) {\n        return {\n          f: s.f\n        };\n      },\n      token: function token(stream, state) {\n        var t = state.f(stream, function (s) {\n          state.f = s;\n        });\n        var w = stream.current();\n        return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-elm\", \"elm\");\n});"],"sourceRoot":""}